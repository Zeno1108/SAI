<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shift Passdown</title>
    <style>
        /* Your existing CSS styles */
    </style>
</head>
<body>
    <div class="container">
        <h1>Shift Passdown</h1>
        
        <div class="button-group">
            <button onclick="showTemplates()">üìã Templates</button>
            <button onclick="showDocuments()">üìÅ Documents</button>
            <button onclick="showCreateTemplate()">‚ûï Create Template</button>
            <button id="saveDocumentBtn" class="hidden" onclick="saveCurrentDocument()">üíæ Save Document</button>
        </div>

        <div id="documentTitle" class="hidden"></div>
        
        <div id="mainContent">
            <p class="info-text">Welcome! Start by creating a template or opening an existing document.</p>
        </div>
    </div>

    <!-- Modals -->
    <!-- (Your existing modal HTML) -->

    <script>
        let currentDocument = null;
        let currentTemplate = null;

        // Initialize storage
        function initStorage() {
            // Your existing storage initialization code
        }

        // Template Management
        // (Your existing template management functions)

        // Document Management
        function showDocuments() {
            // Your existing document management code
        }

        function openDocument(documentId) {
            // Your existing document opening code
            
            if (doc) {
                currentDocument = doc;
                
                // Load the template
                const templates = JSON.parse(localStorage.getItem('templates') || '[]');
                currentTemplate = templates.find(t => t.id === doc.templateId);
                
                if (!currentTemplate) {
                    alert('Template not found. The document cannot be opened.');
                    return;
                }
                
                closeModal('documentsModal');
                renderDocument();
            }
        }

        function saveCurrentDocument() {
            // Your existing document saving code
        }

        function deleteDocument(documentId) {
            // Your existing document deletion code
        }

        function renderDocument() {
            if (!currentTemplate || !currentDocument) return;
            
            const mainContent = document.getElementById('mainContent');
            document.getElementById('saveDocumentBtn').classList.remove('hidden');
            updateDocumentTitle();
            
            let tableHTML = '<table id="dataTable"><thead><tr>';
            
            // Add headers
            currentTemplate.columns.forEach(column => {
                tableHTML += `<th>${column.name}</th>`;
            });
            tableHTML += '<th>Actions</th></tr></thead><tbody>';
            
            // Add existing data rows
            if (currentDocument.data && currentDocument.data.length > 0) {
                currentDocument.data.forEach((rowData, rowIndex) => {
                    tableHTML += '<tr>';
                    currentTemplate.columns.forEach(column => {
                        const value = rowData[column.name] || '';
                        tableHTML += `<td><input type="text" value="${value}"></td>`;
                    });
                    tableHTML += `<td><button class="danger" onclick="deleteRow(${rowIndex})">Delete</button></td>`;
                    tableHTML += '</tr>';
                });
            }
            
            // Add new row button
            tableHTML += '<tr><td colspan="' + (currentTemplate.columns.length + 1) + '"><button class="add-row-btn" onclick="addRow()">‚ûï Add Row</button></td></tr>';
            tableHTML += '</tbody></table>';
            
            mainContent.innerHTML = tableHTML;
        }

        function addRow() {
            if (!currentTemplate) return;
            
            const dataTable = document.getElementById('dataTable');
            const newRow = dataTable.insertRow(-1);
            
            currentTemplate.columns.forEach(column => {
                const cell = newRow.insertCell();
                const input = document.createElement('input');
                input.type = 'text';
                cell.appendChild(input);
            });
            
            const actionCell = newRow.insertCell();
            const deleteButton = document.createElement('button');
            deleteButton.className = 'danger';
            deleteButton.textContent = 'Delete';
            deleteButton.onclick = () => deleteRow(newRow.rowIndex - 1);
            actionCell.appendChild(deleteButton);
        }

        function deleteRow(rowIndex) {
            if (!currentDocument) return;
            
            currentDocument.data.splice(rowIndex, 1);
            renderDocument();
        }

        function updateDocumentTitle() {
            const documentTitle = document.getElementById('documentTitle');
            if (currentDocument) {
                documentTitle.textContent = currentDocument.name || 'Untitled Document';
                documentTitle.classList.remove('hidden');
            } else {
                documentTitle.classList.add('hidden');
            }
        }

        // Initialize storage and event listeners
        initStorage();
    </script>
</body>
</html>
