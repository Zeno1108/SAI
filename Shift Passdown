<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Table Document Manager</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: #f5f5f5;
            color: #333;
            line-height: 1.6;
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .container {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 20px;
        }

        h1, h2 {
            color: #2c3e50;
            margin-bottom: 20px;
        }

        .button-group {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
            touch-action: manipulation;
        }

        button:hover {
            background-color: #2980b9;
        }

        button:active {
            transform: scale(0.98);
        }

        button.secondary {
            background-color: #95a5a6;
        }

        button.secondary:hover {
            background-color: #7f8c8d;
        }

        button.danger {
            background-color: #e74c3c;
        }

        button.danger:hover {
            background-color: #c0392b;
        }

        input[type="text"], input[type="number"], select {
            width: 100%;
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
            margin-bottom: 10px;
            transition: border-color 0.3s;
        }

        input[type="text"]:focus, input[type="number"]:focus, select:focus {
            outline: none;
            border-color: #3498db;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            overflow-x: auto;
            display: block;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
            min-width: 100px;
        }

        th {
            background-color: #34495e;
            color: white;
            font-weight: bold;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        td input {
            width: 100%;
            border: none;
            padding: 8px;
            font-size: 14px;
            background-color: transparent;
        }

        td input:focus {
            outline: 2px solid #3498db;
            border-radius: 4px;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        tr:hover {
            background-color: #e8f4f8;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            overflow-y: auto;
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 30px;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            animation: slideIn 0.3s;
        }

        @keyframes slideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            line-height: 20px;
        }

        .close:hover {
            color: #000;
        }

        .template-item, .document-item {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 15px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .column-config {
            margin-bottom: 15px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 6px;
        }

        .column-config input {
            margin-bottom: 5px;
        }

        .info-text {
            color: #6c757d;
            font-size: 14px;
            margin-bottom: 10px;
        }

        @media (max-width: 768px) {
            body {
                padding: 10px;
            }
            
            .container {
                padding: 15px;
            }
            
            button {
                font-size: 14px;
                padding: 10px 20px;
            }
            
            .modal-content {
                width: 95%;
                padding: 20px;
                margin: 10% auto;
            }
            
            table {
                font-size: 14px;
            }
            
            th, td {
                padding: 8px;
                min-width: 80px;
            }
        }

        .hidden {
            display: none;
        }

        .add-row-btn {
            margin-top: 10px;
        }

        #documentTitle {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
            padding: 10px;
            background-color: #ecf0f1;
            border-radius: 6px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìä Table Document Manager</h1>
        
        <div class="button-group">
            <button onclick="showTemplates()">üìã Templates</button>
            <button onclick="showDocuments()">üìÅ Documents</button>
            <button onclick="showCreateTemplate()">‚ûï Create Template</button>
            <button id="saveDocumentBtn" class="hidden" onclick="saveCurrentDocument()">üíæ Save Document</button>
        </div>

        <div id="documentTitle" class="hidden"></div>
        
        <div id="mainContent">
            <p class="info-text">Welcome! Start by creating a template or opening an existing document.</p>
        </div>
    </div>

    <!-- Templates Modal -->
    <div id="templatesModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('templatesModal')">&times;</span>
            <h2>Templates</h2>
            <div id="templatesList"></div>
        </div>
    </div>

    <!-- Documents Modal -->
    <div id="documentsModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('documentsModal')">&times;</span>
            <h2>Saved Documents</h2>
            <div id="documentsList"></div>
        </div>
    </div>

    <!-- Create Template Modal -->
    <div id="createTemplateModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('createTemplateModal')">&times;</span>
            <h2>Create New Template</h2>
            <input type="text" id="templateName" placeholder="Template Name" />
            <div id="columnsConfig">
                <h3>Configure Columns</h3>
                <div class="column-config">
                    <input type="text" class="column-name" placeholder="Column Name" />
                    <select class="column-type">
                        <option value="text">Text</option>
                        <option value="number">Number</option>
                        <option value="date">Date</option>
                    </select>
                </div>
            </div>
            <button onclick="addColumnConfig()">‚ûï Add Column</button>
            <button onclick="createTemplate()">Create Template</button>
        </div>
    </div>

    <script>
        let currentDocument = null;
        let currentTemplate = null;

        // Initialize storage
        function initStorage() {
            if (!localStorage.getItem('templates')) {
                localStorage.setItem('templates', JSON.stringify([]));
            }
            if (!localStorage.getItem('documents')) {
                localStorage.setItem('documents', JSON.stringify([]));
            }
        }

        // Template Management
        function showTemplates() {
            const templates = JSON.parse(localStorage.getItem('templates') || '[]');
            const templatesList = document.getElementById('templatesList');
            
            templatesList.innerHTML = '';
            
            if (templates.length === 0) {
                templatesList.innerHTML = '<p class="info-text">No templates yet. Create your first template!</p>';
            } else {
                templates.forEach(template => {
                    const item = document.createElement('div');
                    item.className = 'template-item';
                    item.innerHTML = `
                        <div>
                            <strong>${template.name}</strong>
                            <br>
                            <small>${template.columns.length} columns</small>
                        </div>
                        <div>
                            <button onclick="useTemplate('${template.id}')">Use</button>
                            <button class="danger" onclick="deleteTemplate('${template.id}')">Delete</button>
                        </div>
                    `;
                    templatesList.appendChild(item);
                });
            }
            
            document.getElementById('templatesModal').style.display = 'block';
        }

        function showCreateTemplate() {
            document.getElementById('createTemplateModal').style.display = 'block';
        }

        function addColumnConfig() {
            const columnsConfig = document.getElementById('columnsConfig');
            const columnConfig = document.createElement('div');
            columnConfig.className = 'column-config';
            columnConfig.innerHTML = `
                <input type="text" class="column-name" placeholder="Column Name" />
                <select class="column-type">
                    <option value="text">Text</option>
                    <option value="number">Number</option>
                    <option value="date">Date</option>
                </select>
                <button class="danger" onclick="this.parentElement.remove()">Remove</button>
            `;
            columnsConfig.appendChild(columnConfig);
        }

        function createTemplate() {
            const templateName = document.getElementById('templateName').value;
            if (!templateName) {
                alert('Please enter a template name');
                return;
            }

            const columns = [];
            const columnConfigs = document.querySelectorAll('.column-config');
            
            columnConfigs.forEach(config => {
                const name = config.querySelector('.column-name').value;
                const type = config.querySelector('.column-type').value;
                if (name) {
                    columns.push({ name, type });
                }
            });

            if (columns.length === 0) {
                alert('Please add at least one column');
                return;
            }

            const template = {
                id: Date.now().toString(),
                name: templateName,
                columns: columns,
                createdAt: new Date().toISOString()
            };

            const templates = JSON.parse(localStorage.getItem('templates') || '[]');
            templates.push(template);
            localStorage.setItem('templates', JSON.stringify(templates));

            closeModal('createTemplateModal');
            resetTemplateForm();
            showTemplates();
        }

        function resetTemplateForm() {
            document.getElementById('templateName').value = '';
            const columnsConfig = document.getElementById('columnsConfig');
            columnsConfig.innerHTML = `
                <h3>Configure Columns</h3>
                <div class="column-config">
                    <input type="text" class="column-name" placeholder="Column Name" />
                    <select class="column-type">
                        <option value="text">Text</option>
                        <option value="number">Number</option>
                        <option value="date">Date</option>
                    </select>
                </div>
            `;
        }

        function deleteTemplate(templateId) {
            if (confirm('Are you sure you want to delete this template?')) {
                let templates = JSON.parse(localStorage.getItem('templates') || '[]');
                templates = templates.filter(t => t.id !== templateId);
                localStorage.setItem('templates', JSON.stringify(templates));
                showTemplates();
            }
        }

        function useTemplate(templateId) {
            const templates = JSON.parse(localStorage.getItem('templates') || '[]');
            const template = templates.find(t => t.id === templateId);
            
            if (template) {
                currentTemplate = template;
                currentDocument = {
                    id: Date.now().toString(),
                    templateId: template.id,
                    templateName: template.name,
                    data: [],
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                };
                
                closeModal('templatesModal');
                renderDocument();
            }
        }

        // Document Management
        function showDocuments() {
            const documents = JSON.parse(localStorage.getItem('documents') || '[]');
            const documentsList = document.getElementById('documentsList');
            
            documentsList.innerHTML = '';
            
            if (documents.length === 0) {
                documentsList.innerHTML = '<p class="info-text">No saved documents yet.</p>';
            } else {
                documents.forEach(doc => {
                    const item = document.createElement('div');
                    item.className = 'document-item';
                    item.innerHTML = `
                        <div>
                            <strong>${doc.name || 'Untitled Document'}</strong>
                            <br>
                            <small>Template: ${doc.templateName}</small>
                            <br>
                            <small>Updated: ${new Date(doc.updatedAt).toLocaleDateString()}</small>
                        </div>
                        <div>
                            <button onclick="openDocument('${doc.id}')">Open</button>
                            <button class="danger" onclick="deleteDocument('${doc.id}')">Delete</button>
                        </div>
                    `;
                    documentsList.appendChild(item);
                });
            }
            
            document.getElementById('documentsModal').style.display = 'block';
        }

        function openDocument(documentId) {
            const documents = JSON.parse(localStorage.getItem('documents') || '[]');
            const doc = documents.find(d => d.id === documentId);
            
            if (doc) {
                currentDocument = doc;
                
                // Load the template
                const templates = JSON.parse(localStorage.getItem('templates') || '[]');
                currentTemplate = templates.find(t => t.id === doc.templateId);
                
                if (!currentTemplate) {
                    alert('Template not found. The document cannot be opened.');
                    return;
                }
                
                closeModal('documentsModal');
                renderDocument();
            }
        }

        function saveCurrentDocument() {
            if (!currentDocument) return;
            
            const documentName = prompt('Enter document name:', currentDocument.name || 'Untitled Document');
            if (documentName === null) return;
            
            currentDocument.name = documentName;
            currentDocument.updatedAt = new Date().toISOString();
            
            // Collect data from table
            const rows = document.querySelectorAll('#dataTable tbody tr');
            const data = [];
            
            rows.forEach(row => {
                const rowData = {};
                const cells = row.querySelectorAll('input');
                cells.forEach((cell, index) => {
                    const columnName = currentTemplate.columns[index].name;
                    rowData[columnName] = cell.value;
                });
                data.push(rowData);
            });
            
            currentDocument.data = data;
            
            // Save to localStorage
            let documents = JSON.parse(localStorage.getItem('documents') || '[]');
            const existingIndex = documents.findIndex(d => d.id === currentDocument.id);
            
            if (existingIndex >= 0) {
                documents[existingIndex] = currentDocument;
            } else {
                documents.push(currentDocument);
            }
            
            localStorage.setItem('documents', JSON.stringify(documents));
            alert('Document saved successfully!');
            updateDocumentTitle();
        }

        function deleteDocument(documentId) {
            if (confirm('Are you sure you want to delete this document?')) {
                let documents = JSON.parse(localStorage.getItem('documents') || '[]');
                documents = documents.filter(d => d.id !== documentId);
                localStorage.setItem('documents', JSON.stringify(documents));
                showDocuments();
            }
        }

        function renderDocument() {
            if (!currentTemplate || !currentDocument) return;
            
            const mainContent = document.getElementById('mainContent');
            document.getElementById('saveDocumentBtn').classList.remove('hidden');
            updateDocumentTitle();
            
            let tableHTML = '<table id="dataTable"><thead><tr>';
            
            // Add headers
            currentTemplate.columns.forEach(column => {
                tableHTML += `<th>${column.name}</th>`;
            });
            tableHTML += '<th>Actions</th></tr></thead><tbody>';
            
            // Add existing data rows
            if (currentDocument.data && currentDocument.data.length > 0) {
                currentDocument.data.forEach((rowData, rowIndex) => {
                    tableHTML += '<tr>';
                    currentTemplate.columns.forEach(column => {
                        const value = rowData[column.name] || '';
                        const inputType = column.type === 'number' ? 'number' : (column.type === 'date' ? 'date' : 'text');
                        tableHTML += `<td><input type="${inputType}" value="${value}" /></td>`;
                    });
                    tableHTML += `<td><button class="danger" onclick="deleteRow(this)">Delete</button></td>`;
                    tableHTML += '</tr>';
                });
            } else {
                // Add one empty row
                tableHTML += '<tr>';
                currentTemplate.columns.forEach(column => {
                    const inputType = column.type === 'number' ? 'number' : (column.type === 'date' ? 'date' : 'text');
                    tableHTML += `<td><input type="${inputType}" /></td>`;
                });
                tableHTML += `<td><button class="danger" onclick="deleteRow(this)">Delete</button></td>`;
                tableHTML += '</tr>';
            }
            
            tableHTML += '</tbody></table>';
            tableHTML += '<button class="add-row-btn" onclick="addRow()">‚ûï Add Row</button>';
            
            mainContent.innerHTML = tableHTML;
        }

        function updateDocumentTitle() {
            const titleDiv = document.getElementById('documentTitle');
            titleDiv.textContent = currentDocument.name || 'Untitled Document';
            titleDiv.classList.remove('hidden');
        }

        function addRow() {
            const tbody = document.querySelector('#dataTable tbody');
            const newRow = document.createElement('tr');
            
            let rowHTML = '';
            currentTemplate.columns.forEach(column => {
                const inputType = column.type === 'number' ? 'number' : (column.type === 'date' ? 'date' : 'text');
                rowHTML += `<td><input type="${inputType}" /></td>`;
            });
            rowHTML += `<td><button class="danger" onclick="deleteRow(this)">Delete</button></td>`;
            
            newRow.innerHTML = rowHTML;
            tbody.appendChild(newRow);
        }

        function deleteRow(button) {
            const row = button.closest('tr');
            const tbody = row.closest('tbody');
            
            if (tbody.children.length > 1) {
                row.remove();
            } else {
                alert('Cannot delete the last row');
            }
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Close modals when clicking outside
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        }

        // Initialize the app
        initStorage();
    </script>
</body>
</html>
